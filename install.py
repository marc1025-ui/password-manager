#!/usr/bin/env python3
"""
Script d'installation automatique pour le gestionnaire de mots de passe.
Ce script v√©rifie les pr√©requis et installe l'application.
"""

import sys
import subprocess
import os
import platform
from pathlib import Path


def check_python_version():
    """V√©rifie que Python 3.9+ est install√©"""
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 9):
        print("‚ùå Erreur: Python 3.9 ou plus r√©cent est requis")
        print(f"Version actuelle: {version.major}.{version.minor}.{version.micro}")
        print("Veuillez mettre √† jour Python: https://www.python.org/downloads/")
        return False

    print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} d√©tect√©")
    return True


def check_pip():
    """V√©rifie que pip est disponible"""
    try:
        subprocess.run([sys.executable, "-m", "pip", "--version"],
                      check=True, capture_output=True)
        print("‚úÖ pip est disponible")
        return True
    except subprocess.CalledProcessError:
        print("‚ùå Erreur: pip n'est pas disponible")
        print("Installez pip: https://pip.pypa.io/en/stable/installation/")
        return False


def install_dependencies():
    """Installe les d√©pendances requises"""
    print("\nüîß Installation des d√©pendances...")

    try:
        # Mettre √† jour pip
        subprocess.run([
            sys.executable, "-m", "pip", "install", "--upgrade", "pip"
        ], check=True)

        # Installer les d√©pendances principales
        dependencies = [
            "cryptography>=41.0.0",
            "argon2-cffi>=23.0.0",
            "PySide6>=6.5.0",
        ]

        for dep in dependencies:
            print(f"  üì¶ Installation de {dep}...")
            subprocess.run([
                sys.executable, "-m", "pip", "install", dep
            ], check=True)

        print("‚úÖ Toutes les d√©pendances ont √©t√© install√©es")
        return True

    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur lors de l'installation des d√©pendances: {e}")
        return False


def install_application():
    """Installe l'application en mode d√©veloppement"""
    print("\nüì± Installation de l'application...")

    try:
        # Installation en mode √©ditable
        subprocess.run([
            sys.executable, "-m", "pip", "install", "-e", "."
        ], check=True)

        print("‚úÖ Application install√©e avec succ√®s")
        return True

    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur lors de l'installation de l'application: {e}")
        return False


def create_desktop_shortcut():
    """Cr√©e un raccourci sur le bureau (selon l'OS)"""
    system = platform.system()

    if system == "Darwin":  # macOS
        create_macos_shortcut()
    elif system == "Linux":
        create_linux_shortcut()
    elif system == "Windows":
        create_windows_shortcut()
    else:
        print(f"‚ö†Ô∏è  Raccourci bureau non support√© pour {system}")


def create_macos_shortcut():
    """Cr√©e un raccourci macOS"""
    try:
        app_script = f"""#!/bin/bash
{sys.executable} -m ui.app_qt
"""

        desktop_path = Path.home() / "Desktop" / "Password Manager.command"
        desktop_path.write_text(app_script)
        os.chmod(desktop_path, 0o755)

        print("‚úÖ Raccourci cr√©√© sur le bureau (macOS)")
    except Exception as e:
        print(f"‚ö†Ô∏è  Impossible de cr√©er le raccourci: {e}")


def create_linux_shortcut():
    """Cr√©e un raccourci Linux (.desktop)"""
    try:
        desktop_entry = f"""[Desktop Entry]
Version=1.0
Type=Application
Name=Password Manager
Comment=Gestionnaire de mots de passe s√©curis√©
Exec={sys.executable} -m ui.app_qt
Icon=application-x-executable
Terminal=false
Categories=Utility;Security;
"""

        desktop_path = Path.home() / "Desktop" / "password-manager.desktop"
        desktop_path.write_text(desktop_entry)
        os.chmod(desktop_path, 0o755)

        print("‚úÖ Raccourci cr√©√© sur le bureau (Linux)")
    except Exception as e:
        print(f"‚ö†Ô∏è  Impossible de cr√©er le raccourci: {e}")


def create_windows_shortcut():
    """Cr√©e un raccourci Windows"""
    try:
        import winshell
        from win32com.client import Dispatch

        desktop = winshell.desktop()
        path = os.path.join(desktop, "Password Manager.lnk")
        target = sys.executable
        arguments = "-m ui.app_qt"

        shell = Dispatch('WScript.Shell')
        shortcut = shell.CreateShortCut(path)
        shortcut.Targetpath = target
        shortcut.Arguments = arguments
        shortcut.WorkingDirectory = os.getcwd()
        shortcut.IconLocation = target
        shortcut.save()

        print("‚úÖ Raccourci cr√©√© sur le bureau (Windows)")
    except ImportError:
        print("‚ö†Ô∏è  Modules Windows manquants pour cr√©er le raccourci")
        print("   Installez: pip install pywin32 winshell")
    except Exception as e:
        print(f"‚ö†Ô∏è  Impossible de cr√©er le raccourci: {e}")


def run_tests():
    """Lance les tests pour v√©rifier l'installation"""
    print("\nüß™ V√©rification de l'installation avec les tests...")

    try:
        result = subprocess.run([
            sys.executable, "run_tests.py", "test_crypto"
        ], capture_output=True, text=True)

        if result.returncode == 0:
            print("‚úÖ Tests cryptographiques pass√©s")
        else:
            print("‚ö†Ô∏è  Certains tests ont √©chou√© (l'application peut quand m√™me fonctionner)")

    except Exception as e:
        print(f"‚ö†Ô∏è  Impossible de lancer les tests: {e}")


def main():
    """Fonction principale d'installation"""
    print("üîê Installation du Gestionnaire de Mots de Passe")
    print("=" * 50)

    # V√©rifications pr√©liminaires
    if not check_python_version():
        sys.exit(1)

    if not check_pip():
        sys.exit(1)

    # Installation
    if not install_dependencies():
        sys.exit(1)

    if not install_application():
        sys.exit(1)

    # Configuration post-installation
    create_desktop_shortcut()
    run_tests()

    # Message de succ√®s
    print("\n" + "=" * 50)
    print("üéâ Installation termin√©e avec succ√®s !")
    print("=" * 50)
    print("\nüì± Pour lancer l'application :")
    print("   Interface graphique: password-manager-gui")
    print("   Ligne de commande:   password-manager")
    print("   Raccourci:           pwmgr")
    print("\nüìö Documentation compl√®te dans README.md")
    print("üß™ Tests disponibles avec: python run_tests.py")
    print("\n‚ö†Ô∏è  IMPORTANT: M√©morisez bien votre mot de passe ma√Ætre !")
    print("   Il n'y a aucun moyen de r√©cup√©ration si vous l'oubliez.")


if __name__ == "__main__":
    main()
