[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "password-manager"
version = "1.0.0"
description = "Gestionnaire de mots de passe sécurisé avec interface graphique"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "Marie-Ange Kuitche", email = "marie-ange@example.com"},
]
keywords = ["password", "manager", "security", "crypto", "vault"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Security",
    "Topic :: Security :: Cryptography",
    "Environment :: X11 Applications :: Qt",
]

dependencies = [
    "cryptography>=41.0.0",
    "argon2-cffi>=23.0.0",
    "PySide6>=6.5.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "coverage>=7.0.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pyinstaller>=6.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "coverage>=7.0.0",
]

[project.scripts]
password-manager = "ui.cli:main"
password-manager-gui = "ui.app_qt:main"
pwmgr = "ui.cli:main"

[project.gui-scripts]
password-manager-gui = "ui.app_qt:main"

[project.urls]
Homepage = "https://github.com/marie-angekuitche/password-manager"
Repository = "https://github.com/marie-angekuitche/password-manager"
Documentation = "https://github.com/marie-angekuitche/password-manager#readme"
"Bug Tracker" = "https://github.com/marie-angekuitche/password-manager/issues"

[tool.hatch.build.targets.wheel]
packages = ["core", "crypto", "storage", "ui"]

[tool.hatch.build.targets.sdist]
include = [
    "core/",
    "crypto/",
    "storage/",
    "ui/",
    "tests/",
    "requirements.txt",
    "README.md",
    "LICENSE",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short --strict-markers"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "security: marks tests as security-related",
]

[tool.coverage.run]
source = ["core", "crypto", "storage", "ui"]
omit = ["tests/*", "*/test_*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
select = ["E", "F", "W", "I", "N", "UP", "S", "B", "A", "C4", "PIE", "SIM", "RET", "ARG", "PTH", "PL", "RUF"]
ignore = [
    "S101",    # Permettre assert dans les tests
    "S105",    # Permettre hardcoded passwords dans les tests
    "S106",    # Permettre hardcoded passwords dans les tests
    "S311",    # Permettre random pour génération de mots de passe
    "PLR0913", # Trop d'arguments (légitime pour certaines fonctions)
    "PLR0912", # Trop de branches (légitime pour la validation)
    "PLR0915", # Trop de statements (légitime pour l'UI)
    "T201",    # Permettre print dans les scripts d'installation
    "S603",    # Permettre subprocess dans les scripts d'installation
    "PLC0415", # Permettre imports conditionnels pour Windows
    "PLW1510", # subprocess.run sans check explicite (légitime parfois)
    "B017",    # Permettre Exception générique dans tests
    "PLR2004", # Magic numbers (légitime dans tests et config)
]
line-length = 88
target-version = "py39"

[tool.ruff.per-file-ignores]
"install.py" = ["T201", "S603", "PLW1510", "S103", "PLR2004", "PTH101", "PTH118", "PTH109"]  # Scripts d'installation
"validate_install.py" = ["T201", "S603", "PLR2004", "F841", "B007", "S607"]
"ci_tests.py" = ["T201"]
"tests/*.py" = ["S101", "PT009", "S105", "S106", "B017", "PLR2004", "PTH108", "PTH110"]  # Tests peuvent utiliser assert et unittest
"ui/app_qt.py" = ["PLR0913", "PLR0912", "PLR0915", "E501"]  # UI complexe légitime
"setup.py" = ["EXE001"]  # Setup script n'a pas besoin d'être exécutable

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
